---
- name: open firewall services for pihole
  ansible.posix.firewalld:
    service: "{{ item }}"
    #zone: public
    permanent: true
    immediate: true
    state: enabled
  loop:
    - dns
    - http
    - https
    - dhcp
  become: true

- name: forward firewall ports to userspace ports for pihole
  ansible.posix.firewalld:
    rich_rule: "{{ item }}"
    #zone: public
    permanent: true
    immediate: true
    state: enabled
  loop:
    - rule family=ipv4 forward-port port=53 protocol=tcp to-port=10053
    - rule family=ipv4 forward-port port=53 protocol=udp to-port=10053
    - rule family=ipv4 forward-port port=67 protocol=udp to-port=10067
    - rule family=ipv4 forward-port port=80 protocol=tcp to-port=10080
    - rule family=ipv4 forward-port port=443 protocol=tcp to-port=10443
  become: true

- name: ensure pihole directories exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
  loop:
    - "{{ ansible_user_dir }}/pihole/etc_pihole"
    - "{{ ansible_user_dir }}/pihole/etc_dnsmasq"

- name: check for existing pihole systemd service file
  ansible.builtin.stat:
    path: "{{ systemd_path }}/container-pihole.service"
  register: service_file

- name: stop pihole container systemd service if exists
  ansible.builtin.systemd:
    name: container-pihole
    scope: "{{ systemd_scope }}"
    state: stopped
  when: service_file.stat.exists

- name: create pihole container and systemd file
  containers.podman.podman_container:
    name: pihole
    image: docker.io/pihole/pihole
    hostname: "{{ pihole_hostname }}"
    dns:
      - 127.0.0.1
      - 8.8.8.8
    state: started
    recreate: true
    ports:
      - 10080:80/tcp
      - 10443:443/tcp
      - 10067:67/udp
      - 10053:53/tcp
      - 10053:53/udp
    env:
      TZ: "{{ pihole_timezone }}"
      ServerIP: "{{ ansible_facts['default_ipv4']['address'] }}"
      WEBPASSWORD: "{{ pihole_password }}"
      INTERFACE: tap0
    volume:
      - "{{ ansible_user_dir }}/pihole/etc_pihole:/etc/pihole:Z"
      - "{{ ansible_user_dir }}/pihole/etc_dnsmasq:/etc/dnsmasq.d:Z"
    generate_systemd:
      new: true
      path: "{{ systemd_path }}"
      restart_policy: always

- name: activate pihole container systemd service
  ansible.builtin.systemd:
    daemon_reload: true
    enabled: true
    name: container-pihole
    scope: "{{ systemd_scope }}"
    state: started

